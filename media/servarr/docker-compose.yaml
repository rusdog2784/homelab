# Compose file for the *arr stack. Configuration files are stored in the
# directory you launch the compose file on. Change to bind mounts if needed.
# All containers are ran with user and group ids of the main user and
# group to aviod permissions issues of downloaded files, please refer
# the read me file for more information.

#############################################################################
# NOTICE: We recently switched to using a .env file. PLEASE refer to the docs.
# https://github.com/TechHutTV/homelab/tree/main/media#docker-compose-and-env
#############################################################################

name: servarrstack

networks:
  servarrnetwork:
    name: servarrnetwork
    ipam:
      config:
        - subnet: 192.168.0.0/24

services:
  gluetun:
    container_name: gluetun
    image: qmcgaw/gluetun
    restart: unless-stopped
    networks:
      servarrnetwork:
        ipv4_address: 192.168.0.2
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun # If running on an LXC see readme for more info.
    ports:
      - 8080:8080 # qbittorrent web interface
      - 6881:6881 # qbittorrent torrent port
      - 6789:6789 # nzbget
      - 9696:9696 # prowlarr
      - 8888:80 # speedtest-tracker
    volumes:
      - ./gluetun:/gluetun
    env_file:
      - .env
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 20s
      timeout: 10s
      retries: 5

  speedtest-tracker:
    container_name: speedtest-tracker
    image: lscr.io/linuxserver/speedtest-tracker:latest
    restart: unless-stopped
    network_mode: service:gluetun
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - APP_KEY=base64:EDVYWeJ1r7Rpk8Z2YUErxkL3oKyaHMsvo+D+x0PhPLM=
      - DB_CONNECTION=sqlite
      - SPEEDTEST_SCHEDULE="0 * * * *"
    volumes:
      - ./config:/config
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true

  qbittorrent:
    container_name: qbittorrent
    image: lscr.io/linuxserver/qbittorrent:latest
    restart: unless-stopped
    network_mode: service:gluetun
    labels:
      - deunhealth.restart.on.unhealthy=true
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=8080 # must match "qbittorrent web interface" port number in gluetun's service above
    volumes:
      - ./qbittorrent/config:/config
      - ./qbittorrent/downloads:/downloads
      - /mnt/plex-media:/data
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 60s
      retries: 3
      start_period: 20s
      timeout: 10s

  # See the 'qBittorrent Stalls with VPN Timeout' section for more information.
  deunhealth:
    container_name: deunhealth
    image: qmcgaw/deunhealth
    restart: always
    network_mode: "none"
    environment:
      - LOG_LEVEL=info
      - HEALTH_SERVER_ADDRESS=127.0.0.1:9999
      - TZ=${TZ}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

#  nzbget:
#    container_name: nzbget
#    image: lscr.io/linuxserver/nzbget:latest
#    restart: unless-stopped
#    network_mode: service:gluetun
#    environment:
#      - PUID=${PUID}
#      - PGID=${PGID}
#      - TZ=${TZ}
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - ./nzbget/config:/config
#      - ./nzbget/downloads:/downloads
#      - /mnt/plex-media:/data
#    depends_on:
#      gluetun:
#        condition: service_healthy
#        restart: true

  prowlarr:
    container_name: prowlarr
    image: lscr.io/linuxserver/prowlarr:latest
    restart: unless-stopped
    network_mode: service:gluetun
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./prowlarr/config:/config
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true

  sonarr:
    container_name: sonarr
    image: lscr.io/linuxserver/sonarr:latest
    restart: unless-stopped
    networks:
      servarrnetwork:
        ipv4_address: 192.168.0.3
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./sonarr:/config
      - /mnt/plex-media:/data
    ports:
      - 8989:8989

  radarr:
    container_name: radarr
    image: lscr.io/linuxserver/radarr:latest
    restart: unless-stopped
    networks:
      servarrnetwork:
        ipv4_address: 192.168.0.4
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./radarr/config:/config
      - /mnt/plex-media:/data
    ports:
      - 7878:7878

  lidarr:
    container_name: lidarr
    image: lscr.io/linuxserver/lidarr:latest
    restart: unless-stopped
    networks:
      servarrnetwork:
        ipv4_address: 192.168.0.5
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./lidarr/config:/config
      - /mnt/plex-media:/data
    ports:
      - 8686:8686

  bazarr:
    container_name: bazarr
    image: lscr.io/linuxserver/bazarr:latest
    restart: unless-stopped
    networks:
      servarrnetwork:
        ipv4_address: 192.168.0.6
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./bazarr/config:/config
      - /mnt/plex-media:/data
    ports:
      - 6767:6767

  flaresolverr:
    container_name: flaresolverr
    # image: ghcr.io/flaresolverr/flaresolverr:latest
    image: 21hsmw/flaresolverr:nodriver
    restart: unless-stopped
    networks:
      servarrnetwork:
        ipv4_address: 192.168.0.7
    environment:
      - TZ=${TZ}
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
    ports:
      - 8191:8191

  flare-bypasser:
    networks:
      servarrnetwork:
        ipv4_address: 192.168.0.8
    build:
      args:
        #CHROME_VERSION: '131.'
        UID: 1000
        CHROME_DISABLE_GPU: true
        # CHECK_SYSTEM: true
        # PYTHON_VERSION: 3.11
      context: flare-bypasser
      dockerfile: Dockerfile
    environment:
      UNUSED: "false"
      # FORKS: "5:3" #< Uncomment if you work with sites with ustable challenge loading (start additional 3 forks after 5 seconds).
      DEBUG: "false"
      VERBOSE: "false"
      SAVE_CHALLENGE_SCREENSHOTS: "false"
    container_name: flare-bypasser
    image: flare-bypasser:latest
    ports:
      - 20080:8080

# Newer additions to this stack feel. Remove the '#' to add the service.
#
#  ytdl-sub:
#    image: ghcr.io/jmbannon/ytdl-sub:latest
#    container_name: ytdl-sub
#    environment:
#      - PUID=${PUID}
#      - PGID=${PGID}
#      - TZ=${TZ}
#      - DOCKER_MODS=linuxserver/mods:universal-cron
#    volumes:
#      - ./ytdl-sub:/config
#      - /data/youtube:/youtube
#    networks:
#      servarrnetwork:
#        ipv4_address: 172.39.0.8
#    restart: unless-stopped
#
#  jellyseerr:
#    container_name: jellyseerr
#    image: fallenbagel/jellyseerr:latest
#    environment:
#      - PUID=${PUID}
#      - PGID=${PGID}
#      - TZ=${TZ}
#    volumes:
#      - ./jellyseerr:/app/config
#    ports:
#      - 5055:5055
#    networks:
#      servarrnetwork:
#        ipv4_address: 172.39.0.9
#    restart: unless-stopped